type Basket @model @auth(rules: [{ allow: public }]) {
	id: ID!
	BasketDishes: [BasketDish] @hasMany(indexName: "byBasket", fields: ["id"])
	userID: ID! @index(name: "byUser")
	restaurantID: ID! @index(name: "byRestaurant")
}

enum OrderStatus {
	NEW
	PREPARING
	READY_FOR_PICKUP
	COMPLETED
	PICKED
}

type OrderItem @model @auth(rules: [{ allow: public }]) {
	id: ID!
	Quantity: Int!
	Dish: Dish @hasOne
	ordersID: ID! @index(name: "byOrders")
}

type Orders @model @auth(rules: [{ allow: public }]) {
	id: ID!
	userID: ID! @index(name: "byUser")
	Restaurant: Restaurant @hasOne
	SubTotal: Float!
	Total: Float!
	Status: OrderStatus!
	OrderItems: [OrderItem] @hasMany(indexName: "byOrders", fields: ["id"])
}

type BasketDish @model @auth(rules: [{ allow: public }]) {
	id: ID!
	Quantity: Int!
	Dish: Dish @hasOne
	basketID: ID! @index(name: "byBasket")
}

type User @model @auth(rules: [{ allow: public }]) {
	id: ID!
	name: String!
	address: String!
	lat: Float!
	lng: Float!
	Orders: [Orders] @hasMany(indexName: "byUser", fields: ["id"])
	Baskets: [Basket] @hasMany(indexName: "byUser", fields: ["id"])
	sub: String!
}

type Dish @model @auth(rules: [{ allow: public }]) {
	id: ID!
	name: String!
	image: String
	description: String
	price: Float
	restaurantID: ID! @index(name: "byRestaurant")
}

type Restaurant @model @auth(rules: [{ allow: public }]) {
	id: ID!
	name: String!
	image: String!
	deliveryFee: Float
	minDeliverytime: Int
	maxDeliveryTime: Int
	rating: Float
	address: String
	lat: Float
	lng: Float
	Dishes: [Dish] @hasMany(indexName: "byRestaurant", fields: ["id"])
	Baskets: [Basket] @hasMany(indexName: "byRestaurant", fields: ["id"])
}
